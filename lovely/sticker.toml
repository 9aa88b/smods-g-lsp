[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

### Sticker API

# generate_UIBox_ability_table()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = "(?<indent>[\t ]*)if self.sticker then loc_vars = loc_vars or \\{\\}; loc_vars.sticker=self.sticker end"
position = "before"
line_prepend = "$indent"
payload = '''
for k, v in ipairs(SMODS.Sticker.obj_buffer) do
	if self.ability[v] then
        badges[#badges+1] = v
    end
end'''

# generate_card_ui()
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'eternal' then*"
match_indent = true
position = "before"
payload = '''
local sticker = SMODS.Stickers[v]
if sticker then
    local t = { key = v, set = 'Other' }
    local res = {}
    if sticker.loc_vars and type(sticker.loc_vars) == 'function' then
        res = sticker:loc_vars(info_queue, card) or {}
        t.vars = res.vars or {}
        t.key = res.key or t.key
    end
    info_queue[#info_queue+1] = t
else'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'rental' then*"
match_indent = true
position = "after"
payload = '''end'''

# create_card()
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if card.ability.consumeable and not skip_materialize then card:start_materialize() end"
position = "after"
match_indent = true
payload = '''
for k, v in ipairs(SMODS.Sticker.obj_buffer) do
    local sticker = SMODS.Stickers[v]
    -- Temp name, change later
    if sticker.sets[_type] and sticker:sticker_check(card, center, area) then
        sticker:set_sticker(card, true)
    end
end'''

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''elseif self.sprite_facing == 'back' then'''
match_indent = true
position = "before"
payload = '''
for k, v in pairs(SMODS.Stickers) do
    if self.ability[v.key] then
        if v and v.draw and type(v.draw) == 'function' then
            v:draw(self)
        else
            G.shared_stickers[v.key].role.draw_major = self
            G.shared_stickers[v.key]:draw_shader('dissolve', nil, nil, nil, self.children.center)
            G.shared_stickers[v.key]:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center)
        end
    end
end
'''

# Card:calculate_joker()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:calculate_joker(context)"
position = 'after'
payload = '''
for k, v in pairs(SMODS.Stickers) do
    if self.ability[v.key] then
        if v.calculate and type(v.calculate) == 'function' then
            local override_card = v:calculate(self, context)
            if override_card then return override_card end
        end
    end
end'''
match_indent = true

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
match_indent = true
payload = '''
for k, v in pairs(SMODS.Stickers) do
    G.BADGE_COL[k] = v.badge_colour
end'''