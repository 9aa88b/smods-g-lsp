[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

### Sticker API

# generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.sticker or ((self.sticker_run and self.sticker_run~='NONE') and G.SETTINGS.run_stake_stickers)  then loc_vars = loc_vars or {}; loc_vars.sticker=(self.sticker or self.sticker_run) end"
position = "before"
match_indent = true
payload = '''
for k, v in ipairs(SMODS.Sticker.obj_buffer) do
	if self.ability[v] and not SMODS.Stickers[v].hide_badge then
        badges[#badges+1] = v
    end
end'''

# generate_card_ui()
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'eternal' then*"
match_indent = true
position = "before"
payload = '''
local sticker = SMODS.Stickers[v]
if sticker then
    local t = { key = v, set = 'Other' }
    local res = {}
    if sticker.loc_vars and type(sticker.loc_vars) == 'function' then
        res = sticker:loc_vars(info_queue, card) or {}
        t.vars = res.vars or {}
        t.key = res.key or t.key
        t.set = res.set or t.set
    end
    info_queue[#info_queue+1] = t
else'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'rental' then*"
match_indent = true
position = "after"
payload = '''end'''

# create_card()
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if card.ability.consumeable and not skip_materialize then card:start_materialize() end"
position = "after"
match_indent = true
payload = '''
for k, v in ipairs(SMODS.Sticker.obj_buffer) do
    local sticker = SMODS.Stickers[v]
    if sticker.should_apply and type(sticker.should_apply) == 'function' and sticker:should_apply(card, center, area) then
        sticker:apply(card, true)
    end
end'''

## Remove base game sticker rolls if one is added
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if G.GAME.modifiers.enable_eternals_in_shop and eternal_perishable_poll > 0.7 then"
position = "at"
match_indent = true
payload = '''if G.GAME.modifiers.enable_eternals_in_shop and eternal_perishable_poll > 0.7 and not SMODS.Stickers["eternal"].should_apply then'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif G.GAME.modifiers.enable_perishables_in_shop and ((eternal_perishable_poll > 0.4) and (eternal_perishable_poll <= 0.7)) then"
position = "at"
match_indent = true
payload = '''elseif G.GAME.modifiers.enable_perishables_in_shop and ((eternal_perishable_poll > 0.4) and (eternal_perishable_poll <= 0.7)) and not SMODS.Stickers["perishable"].should_apply then'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if G.GAME.modifiers.enable_rentals_in_shop and pseudorandom((area == G.pack_cards and 'packssjr' or 'ssjr')..G.GAME.round_resets.ante) > 0.7 then"
position = "at"
match_indent = true
payload = '''if G.GAME.modifiers.enable_rentals_in_shop and pseudorandom((area == G.pack_cards and 'packssjr' or 'ssjr')..G.GAME.round_resets.ante) > 0.7 and not SMODS.Stickers["rental"].should_apply then'''

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''elseif self.sprite_facing == 'back' then'''
match_indent = true
position = "before"
payload = '''
for k, v in pairs(SMODS.Stickers) do
    if self.ability[v.key] then
        if v and v.draw and type(v.draw) == 'function' then
            v:draw(self, layer)
        else
            G.shared_stickers[v.key].role.draw_major = self
            G.shared_stickers[v.key]:draw_shader('dissolve', nil, nil, nil, self.children.center)
            G.shared_stickers[v.key]:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center)
        end
    end
end
'''

# end_round()
# [[patches]]
# [patches.pattern]
# target = 'functions/state_events.lua'
# match_indent = true
# position = 'before'
# pattern = "if G.GAME.round_resets.ante == G.GAME.win_ante and G.GAME.blind:get_type() == 'Boss' then"
# payload = '''
# for i, v in ipairs(G.hand.cards) do
#     eval_card(G.hand.cards[i], {cardarea = G.hand, end_of_round = true, game_over = game_over })
# end
# '''

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
match_indent = true
payload = '''
for k, v in pairs(SMODS.Stickers) do
    G.BADGE_COL[k] = v.badge_colour
end'''

## Remove Pinned effect when in Sticker collections
# CardArea:aling_cards
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''table.sort(self.cards, function (a, b) return a.T.x + a.T.w/2 - 100*(a.pinned and a.sort_id or 0) < b.T.x + b.T.w/2 - 100*(b.pinned and b.sort_id or 0) end)'''
position = 'at'
match_indent = true
payload = '''table.sort(self.cards, function (a, b) return a.T.x + a.T.w/2 - 100*((a.pinned and not a.ignore_pinned) and a.sort_id or 0) < b.T.x + b.T.w/2 - 100*((b.pinned and not b.ignore_pinned) and b.sort_id or 0) end)'''


# [[patches]]
# [patches.regex]
# target = 'functions/state_events.lua'
# pattern = 'G\.jokers\.cards\[i\]:calculate_joker\('
# position = 'at'
# payload = 'eval_card(G.jokers.cards[i], '

# [[patches]]
# [patches.regex]
# target = 'functions/state_events.lua'
# pattern = 'G\.jokers\.cards\[j\]:calculate_joker\('
# position = 'at'
# payload = 'eval_card(G.jokers.cards[j], '

# [[patches]]
# [patches.regex]
# target = 'functions/state_events.lua'
# pattern = 'G\.jokers\.cards\[k\]:calculate_joker\('
# position = 'at'
# payload = 'eval_card(G.jokers.cards[k], '

[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = 'v:calculate_joker\('
position = 'at'
payload = 'eval_card(v, '

[[patches]]
[patches.regex]
target = 'card.lua'
pattern = 'G\.jokers\.cards\[i\]:calculate_joker\('
position = 'at'
payload = 'eval_card(G.jokers.cards[i], '

[[patches]]
[patches.regex]
target = 'functions/misc_functions.lua'
pattern = 'G\.jokers\.cards\[i\]:calculate_joker\('
position = 'at'
payload = 'eval_card(G.jokers.cards[i], '

[[patches]]
[patches.regex]
target = 'functions/button_callbacks.lua'
pattern = 'G\.jokers\.cards\[i\]:calculate_joker\('
position = 'at'
payload = 'eval_card(G.jokers.cards[i], '

[[patches]]
[patches.regex]
target = 'functions/button_callbacks.lua'
pattern = 'c1:calculate_joker\(\{buying_card = true, card = c1\}\)'
position = 'at'
payload = 'eval_card(c1, {buying_card = true, card = c1})'

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'self:calculate_joker{selling_self = true}'
position = 'at'
match_indent = true
payload = 'eval_card(self, {selling_self = true})'

# [[patches]]
# [patches.pattern]
# target = "functions/common_events.lua"
# pattern = "if context.cardarea == G.jokers or context.card == G.consumeables then"
# match_indent = true
# position = "at"
# payload = "if card.ability.set == 'Joker' or card.ability.consumeable then"

[[patches]]
[patches.regex]
target = 'game.lua'
pattern = 'G\.jokers\.cards\[i\]:calculate_joker\('
position = 'at'
payload = 'eval_card(G.jokers.cards[i], '
