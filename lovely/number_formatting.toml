[manifest]
version = "1.0.0"
dump_lua = true
priority = 69

#
# Use number_format for...
#

# DynaText

[[patches]] 
[patches.regex]
target = "engine/text.lua"
pattern = 'tostring\((?<param>v\.ref_table and v\.ref_table\[v\.ref_value\] or v\.string)\)'
position = "at"
payload = "format_ui_value($param)"

# Cash Out

[[patches]] 
[patches.regex]
target = "functions/common_events.lua"
pattern = '''
localize\('\$'\)\.\.config\.dollars'''
position = "at"
payload = "localize('$')..format_ui_value(config.dollars)"

# End of round money

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''
localize\('\$'\)\.\.num_dollars\}'''
position = "at"
payload = "localize('$')..format_ui_value(num_dollars)}"

# Tooltip numbers

[[patches]] 
[patches.regex]
target = "functions/misc_functions.lua"
pattern = '(?<param>args\.vars\[tonumber\(subpart\[1\]\)\])'
position = "at"
payload = 'format_ui_value($param)'

# Poker Hand chips

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={text = G.GAME.hands[handname].chips, scale = 0.45, colour = G.C.UI.TEXT_LIGHT}},"
position = "at"
payload = "{n=G.UIT.T, config={text = number_format(G.GAME.hands[handname].chips, 1000000), scale = 0.45, colour = G.C.UI.TEXT_LIGHT}},"
match_indent = true

# Poker Hand mult

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={text = G.GAME.hands[handname].mult, scale = 0.45, colour = G.C.UI.TEXT_LIGHT}}"
position = "at"
payload = "{n=G.UIT.T, config={text = number_format(G.GAME.hands[handname].mult, 1000000), scale = 0.45, colour = G.C.UI.TEXT_LIGHT}}"
match_indent = true

# Continue Run - Money

[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = 'tostring\(saved_game\.GAME\.dollars\)'
position = "at"
payload = "format_ui_value(saved_game.GAME.dollars)"

# Continue Run - Best Hand - bigger size

[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = 'scale_number\(saved_game\.GAME\.round_scores\.hand\.amt\, 0\.8\*scale\)'
position = "at"
payload = "score_number_scale(scale*1.1, saved_game.GAME.round_scores.hand.amt)"

#
# Money scaling fix
#

# Add scale function to money

[[patches]] 
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''
string = \{\{ref_table = G\.GAME\, ref_value = 'dollars'\, prefix = localize\('\$'\)\}\}\,'''
position = "after"
payload = '''

                            scale_function = function ()
                                return score_number_scale(2.2 * scale, G.GAME.dollars, 1000000)
                            end,'''

# Re-set self.scale if scale function is present

[[patches]] 
[patches.pattern]
target = "engine/text.lua"
pattern = 'self.config.H = 0'
position = "after"
payload = "self.scale = self.config.scale_function and self.config.scale_function() or self.scale"
match_indent = true


#
# Custom sci notation switch point
#

# number_format

[[patches]] 
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = 'function number_format(num)'
position = "at"
payload = 'function number_format(num, e_switch_point)'
match_indent = true

# number_format 
# - fix floating point error (1.000e92 instead of 10.000e91)
# - lower precision with higher numbers

[[patches]] 
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
return string.format("%.3f",x/(10^fac))..'e'..fac'''
position = "at"
payload = '''
local mantissa = math.round(x/(10^fac), 3)
if mantissa >= 10 then
  mantissa = mantissa / 10
  fac = fac + 1
end
return string.format(fac >= 100 and "%.1fe%i" or fac >= 10 and "%.2fe%i" or "%.3fe%i", mantissa, fac)'''
match_indent = true


# score_number_scale

[[patches]] 
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = 'function score_number_scale(scale, amt)'
position = "at"
payload = 'function score_number_scale(scale, amt, e_switch_point)'
match_indent = true

# Check if custom switch point is specified

[[patches]] 
[patches.regex]
target = "functions/misc_functions.lua"
pattern = '>= G\.E_SWITCH_POINT'
position = "at"
payload = ">= (e_switch_point or G.E_SWITCH_POINT)"

