[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Fix debug mode edition cycling
[[patches]]
[patches.regex]
target = "engine/controller.lua"
pattern = '''
(?<indent>[\t ]*)local _edition = \{
[\t ]*foil = not _card\.edition,
[\t ]*holo = _card\.edition and _card\.edition\.foil,
[\t ]*polychrome = _card\.edition and _card\.edition\.holo,
[\t ]*negative = _card\.edition and _card\.edition\.polychrome,
[\t ]*\}'''
position = "at"
payload = '''
local found_index = 1
if _card.edition then
    for i, v in ipairs(G.P_CENTER_POOLS.Edition) do
        if v.key == _card.edition.key then
            found_index = i
            break
        end
    end
end
found_index = found_index + 1
if found_index > #G.P_CENTER_POOLS.Edition then found_index = found_index - #G.P_CENTER_POOLS.Edition end
local _edition = G.P_CENTER_POOLS.Edition[found_index].key
print(("debug setting edition: %s"):format(_edition))'''
line_prepend = "$indent"


# Sort P_CENTER_POOLS["Editions"]
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = 'table.sort(self.P_CENTER_POOLS["Enhanced"], function (a, b) return a.order < b.order end)'
position = 'after'
payload = 'table.sort(self.P_CENTER_POOLS["Edition"], function (a, b) return a.order < b.order end)'
match_indent = true


# generate_card_ui()
# Adds tooltips for all editions
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = '''
(?<indent>[\t ]*)if v == 'foil' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_foil'\] end
[\t ]*if v == 'holographic' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_holo'\] end
[\t ]*if v == 'polychrome' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_polychrome'\] end
[\t ]*if v == 'negative' then info_queue\[#info_queue\+1\] = G\.P_CENTERS\['e_negative'\] end'''
position = 'at'
payload = '''
sendDebugMessage(tostring(v))
v = (v == 'holographic' and 'holo' or v)
if G.P_CENTERS['e_'..v] and G.P_CENTERS['e_'..v].set == 'Edition' then
    info_queue[#info_queue + 1] = G.P_CENTERS['e_'..v]
end'''
line_prepend = "$indent"

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
match_indent = true
payload = '''
for _, v in ipairs(G.P_CENTER_POOLS.Edition) do
	G.BADGE_COL[v.key] = v.badge_colour
end
'''

# Inject shaders applying to cards
# Card:draw()
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''
(?<indent>[\t ]*)if self\.edition and self\.edition\.holo then
[\t ]*self\.children\.center\:draw_shader\('holo', nil, self\.ARGS\.send_to_shader\)
[\t ]*if self\.children\.front and self\.ability\.effect ~= 'Stone Card' then
[\t ]*self\.children\.front\:draw_shader\('holo', nil, self\.ARGS\.send_to_shader\)
[\t ]*end
[\t ]*end
[\t ]*if self\.edition and self\.edition\.foil then
[\t ]*self\.children\.center\:draw_shader\('foil', nil, self\.ARGS\.send_to_shader\)
[\t ]*if self\.children\.front and self\.ability\.effect ~= 'Stone Card' then
[\t ]*self\.children\.front\:draw_shader\('foil', nil, self\.ARGS\.send_to_shader\)
[\t ]*end
[\t ]*end
[\t ]*if self\.edition and self\.edition\.polychrome then
[\t ]*self\.children\.center\:draw_shader\('polychrome', nil, self\.ARGS\.send_to_shader\)
[\t ]*if self\.children\.front and self\.ability\.effect ~= 'Stone Card' then
[\t ]*self\.children\.front\:draw_shader\('polychrome', nil, self\.ARGS\.send_to_shader\)
[\t ]*end
[\t ]*end'''
position = "at"
payload = '''
if self.edition then
    for k, v in pairs(G.P_CENTER_POOLS.Edition) do
        if v.shader then
            if self.edition[v.key:sub(3)] then
                self.children.center:draw_shader(v.shader, nil, self.ARGS.send_to_shader)
                if self.children.front and self.ability.effect ~= 'Stone Card' then
                    self.children.front:draw_shader(v.shader, nil, self.ARGS.send_to_shader)
                end
            end
        end
    end
end'''
line_prepend = "$indent"

# Inject shaders applying to floating sprite shadows
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.floating_sprite:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)"
position = "after"
payload = '''
if self.edition then 
    for k, v in pairs(G.P_CENTER_POOLS.Edition) do
        if v.apply_to_float then
            if self.edition[v.key:sub(3)] then
                self.children.floating_sprite:draw_shader(v.shader, nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)
            end
        end
    end
end'''
match_indent = true

# Inject shaders applying to floating sprites
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod)"
position = "after"
payload = '''
if self.edition then 
    for k, v in pairs(G.P_CENTER_POOLS.Edition) do
        if v.apply_to_float then
            if self.edition[v.key:sub(3)] then
                self.children.floating_sprite:draw_shader(v.shader, nil, nil, nil, self.children.center, scale_mod, rotate_mod)
            end
        end
    end
end'''
match_indent = true

# Inject change to edition cost in shop
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '(?<indent>[\t ]*)self.ex([a-z._\s=+(0-9)]*)\n([\t ]*)([a-z._\s=+(0-9)]*)or 0\)'
position = "at"
payload = '''
for k, v in pairs(G.P_CENTER_POOLS.Edition) do
    if self.edition[v.key:sub(3)] then
        if v.extra_cost then
            self.extra_cost = self.extra_cost + v.extra_cost
        else
            self.extra_cost = 0
        end
    end
end'''
line_prepend = "$indent"

# Alternate scoring effects for editions

# Add played dollars to cards
[[patches]]
[patches.pattern]
target = "functions/state_events.lua" # line 763
pattern = '''hand_chips = mod_chips(hand_chips + (effects[ii].edition.chip_mod or 0))'''
position = "before"
payload = '''
if effects[ii].edition.chip_mod then
    hand_chips = mod_chips(hand_chips + effects[ii].edition.chip_mod)
    local key_switch = (effects[ii].edition.chip_mod > 0 and 'a_chips' or 'a_chips_minus')
    card_eval_status_text(scoring_hand[i], 'extra', nil, percent, nil, {
        message = localize{type='variable', key=key_switch, vars={math.abs(effects[ii].edition.chip_mod)}},
        chip_mod = true,
        colour = G.C.DARK_EDITION,
        edition = true
    })
    update_hand_text({delay = 0}, {chips = hand_chips})
end
if effects[ii].edition.mult_mod then
    mult = mult + effects[ii].edition.mult_mod
    card_eval_status_text(scoring_hand[i], 'extra', nil, percent, nil, {
        message = localize{type='variable', key='a_mult', vars={effects[ii].edition.mult_mod}},
        mult_mod = true,
        colour = G.C.DARK_EDITION,
        edition = true
    })
    update_hand_text({delay = 0}, {mult = mult})
end
if effects[ii].edition.x_mult_mod then
    mult = mult * effects[ii].edition.x_mult_mod
    card_eval_status_text(scoring_hand[i], 'extra', nil, percent, nil, {
        message = localize{type='variable', key='a_xmult', vars={effects[ii].edition.x_mult_mod}},
        x_mult_mod = true,
        colour = G.C.DARK_EDITION,
        edition = true
    })
    update_hand_text({delay = 0}, {mult = mult})
end
if not effects[ii].edition then'''
match_indent = true

# Add played dollars to jokers
[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''                                edition = true\}\)'''
position = "after"
payload = '''end'''

# Repetitions
[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''card_eval_status_text\(\(reps\[j].jokers or reps\[j].seals\).card, 'jokers', nil, nil, nil, \(reps\[j].jokers or reps\[j].seals\)\)\n\s+end'''
position = "at"
payload = '''card_eval_status_text((reps[j].jokers or reps[j].seals or reps[j].edition).card, 'jokers', nil, nil, nil, (reps[j].jokers or reps[j].seals or reps[j].edition))
end'''

[[patches]]
[patches.pattern]
target = "functions/state_events.lua" # line 763
pattern = "local eval = eval_card(scoring_hand[i], {repetition_only = true,cardarea = G.play, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, repetition = true})"
position = "after"
payload = '''
if next(eval) and eval.edition.repetitions then 
    for h = 1, eval.edition.repetitions do
        reps[#reps+1] = eval
    end
end'''
match_indent = true
