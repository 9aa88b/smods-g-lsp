[manifest]
version = "1.0.0"
dump_lua = true
priority = -10

#========================================================#
# Choose any rank for custom deck and use provided atlas #
#========================================================#
[[patches]]
[patches.regex]
target = "functions/misc_functions.lua"
pattern = '''if _front and _front.suit and \(_front.value == 'Jack' or _front.value == 'Queen' or _front.value == 'King'\) then([\s\S]*?)end([\s\S]*?)end([\s\S]*?)end'''
position = "at"
payload = '''
if _front and _front.suit and G.SETTINGS.CUSTOM_DECK and G.SETTINGS.CUSTOM_DECK.Collabs then
    local collab = G.SETTINGS.CUSTOM_DECK.Collabs[_front.suit]
    if collab and collab ~= 'default' then
        local deckSkin = SMODS.DeckSkins[collab]
        if deckSkin then
            if deckSkin.outdated then
                sendDebugMessage("Skin is outdated")
                local hasRank = false
                for i = 1, #deckSkin.ranks do
                    if deckSkin.ranks[i] == _front.value then hasRank = true break end
                end
                if hasRank then
                    local atlas = G.ASSET_ATLAS[G.SETTINGS.colourblind_option and deckSkin.hc_atlas or deckSkin.lc_atlas]
                    if atlas then
                        if deckSkin.posStyle == 'collab' then
                            return atlas, G.COLLABS.pos[_front.value]
                        elseif deckSkin.posStyle == 'suit' then
                            return atlas, { x = _front.pos.x, y = 0}
                        elseif deckSkin.posStyle == 'deck' then
                            return atlas, _front.pos
                        elseif deckSkin.posStyle == 'ranks' or nil then
                            for i, rank in ipairs(deckSkin.ranks) do
                                if rank == _front.value then
                                    return atlas, { x = i - 1, y = 0}
                                end
                            end
                        end
                    end
                end
            else
                sendDebugMessage("Skin is NOT outdated")
                local palette = SMODS.get_deckskin_palette(deckSkin.key, G.SETTINGS.colourpalettes[_front.suit], _front.suit)
                local hasRank = false
                for i = 1, #palette.ranks do
                    if palette.ranks[i] == _front.value then hasRank = true break end
                end
                if hasRank then
                    sendDebugMessage("hasRank is true")
                    if type(palette.atlas) == "table" then
                        sendDebugMessage("Atlas is a table, advanced atlas")
                        if palette.atlas[_front.value] then
                            local atlas = G.ASSET_ATLAS[palette.atlas]
                            if palette.pos and not palette.posStyle then
                                print_atlas_pos(atlas, palette.pos)
                                return atlas, palette.pos
                            else
                                if palette.posStyle == 'collab' then
                                    return atlas, G.COLLABS.pos[_front.value]
                                elseif palette.posStyle == 'suit' then
                                    return atlas, { x = _front.pos.x, y = 0}
                                elseif palette.posStyle == 'deck' then
                                    return atlas, _front.pos
                                elseif palette.posStyle == 'ranks' or nil then
                                    for i, rank in ipairs(deckSkin.ranks) do
                                        if rank == _front.value then
                                            return atlas, { x = i - 1, y = 0}
                                        end
                                    end
                                end
                            end
                        end
                    else
                        sendDebugMessage("Atlas is not a table, simple atlas")
                        local atlas = G.ASSET_ATLAS[palette.atlas]
                        if palette.posStyle then
                            if palette.posStyle == 'collab' then
                                return atlas, G.COLLABS.pos[_front.value]
                            elseif palette.posStyle == 'suit' then
                                return atlas, { x = _front.pos.x, y = 0}
                            elseif palette.posStyle == 'deck' then
                                return atlas, _front.pos
                            elseif palette.posStyle == 'ranks' or nil then
                                for i, rank in ipairs(deckSkin.ranks) do
                                    if rank == _front.value then
                                        return atlas, { x = i - 1, y = 0}
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end
'''

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.O, config={object = face_cards}}"
position = "at"
payload = "{n=G.UIT.O, config={object = G.cdds_cards}}"
match_indent = true
overwrite = false

#=======================#
# Extend custom deck ui #
#=======================#
[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''local face_cards = CardArea\(([\s\S]*?)\)'''
position = "at"
payload = '''
local rankCount = 0
local lookup = {}
for i, s in ipairs(SMODS.Suit:obj_list(true)) do
    local options = G.COLLABS.options[s.key]
    for i = 1, #options do
        local skin = SMODS.DeckSkins[options[i]]
        if skin.palettes and not (skin.display_ranks or skin.ranks) then
            for _, p in ipairs(skin.palettes) do
                for j = 1, #p.ranks do
                    if not lookup[p.ranks[j]] then
                        lookup[p.ranks[j]] = true
                        rankCount = rankCount + 1
                    end
                end
            end
        elseif not skin.palettes and (skin.display_ranks or skin.ranks) then
            local ranks = skin.display_ranks or skin.ranks
            for j = 1, #ranks do
                if not lookup[skin.ranks[j]] then
                    lookup[skin.ranks[j]] = true
                    rankCount = rankCount + 1
                end
            end
        end

    end
end

G.cdds_cards = CardArea(
    0,0,
    math.min(math.max(rankCount*G.CARD_W*0.6, 4*G.CARD_W), 10*G.CARD_W),
    1.4*G.CARD_H,
    {card_limit = rankCount, type = 'title', highlight_limit = 0})

G.cdds_cards.rankCount = rankCount

'''

[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''for i = 1, 3 do([\s\S]*?)end'''
position = "at"
payload = '''
G.FUNCS.update_collab_cards(current_option, _suit, true)
'''

[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''function create_UIBox_customize_deck()([\s\S]*?)end'''
position = "at"
payload = '''
function create_UIBox_customize_deck()
  local suitTabs = {}

  local index = 1
  for i, suit in ipairs(SMODS.Suit:obj_list(true)) do
    if G.COLLABS.options[suit.key] then
        suitTabs[index] = {
                    label = localize(suit.key, 'suits_plural'),
                    tab_definition_function = G.UIDEF.custom_deck_tab,
                    tab_definition_function_args = suit.key
                }
        index = index + 1
    end
  end

  if suitTabs[1] then
    suitTabs[1].chosen = true
  end

  local t = create_UIBox_generic_options({ back_func = 'options', snap_back = nil, contents = {
    {n=G.UIT.R, config={align = "cm", padding = 0}, nodes={
      create_tabs(
        {tabs = suitTabs, snap_to_nav = true, no_shoulders = true}
    )}}}
  })

  return t
end
'''
